/*ASSIGNMENT COMPLETION PROBLEM
There are 3 student processes and 1 teacher process. Students are supposed to do their assignments 
and they need 3 things for that-pen, paper and question paper. The teacher has an infinite supply of all the three things. 
One students has pen, another has paper and another has question paper. The teacher places two things on a shared table and
the student having the third complementary thing makes the assignment and tells the teacher on completion. 
The teacher then places an other two things out of the three and again the student having the third thing makes the assignment and tells
the teacher on completion. This cycle continues. WAP to synchronise the teacher and the students.*/


#include <pthread.h> 
#include <stdio.h> 
#include<stdlib.h>

void *fun1(void *receive); //declaring functions
void *fun2(void *receive);
void *fun3(void *receive);

pthread_mutex_t l; 			//declaring mutex variable
int shared=1;

struct resource
{
	int pen;
	int paper;
	int q_paper;
};

int turn=0;

int main()
{
	printf("Student 1 has pen.\n");
	printf("Student 2 has paper.\n");
	printf("Student 3 has question paper.\n\n");
	
	pthread_mutex_init(&l, NULL); //initializing mutex locks
	pthread_t student1, student2,student3;	//declaring thread variable
	
	struct resource send;					//declaring object of resource

	    if(turn==0)
		{
			send.paper=1;
			send.q_paper=1;
			turn++;
		}
			if(turn==1)
		{
			send.pen=1;
			send.q_paper=1;
			turn++;
	}
		if(turn==2)
	{
		send.paper=1;
		send.pen=1;
		turn++;
	}
	pthread_create(&student1, NULL, fun1, &send); // Thread creation
	pthread_create(&student2, NULL, fun2, &send);
	pthread_create(&student3, NULL, fun3, &send);
	
	pthread_join(student1, NULL);
	pthread_join(student2, NULL);				// Thread join
	pthread_join(student3,NULL);
	
	return 0;
}
void *fun1(void *receive)
{
    int x;
    int pen=1;
    struct resource *check=(struct resource *)receive;
   	if((check->paper==1)&&(check->q_paper==1))
    {
	    pthread_mutex_lock(&l);			//locking variable l
	    x=shared;
	    x++; 
	    printf("Teacher has given paper and question paper and Student 1 have pen.\n");
	    sleep(3); 
	    shared=x; 
	    printf("Student 1 has completed assignment.\n\n");
	    pthread_mutex_unlock(&l);					//unlocking variable
   
  	}
}
void *fun2(void *receive)
{
    int x;
    int paper =2;
    struct resource *check=(struct resource *)receive;
  	 if((check->pen==1)&&(check->q_paper==1))
   {
	    pthread_mutex_lock(&l);
	    x=shared;
	    x++;  
	    printf("Teacher has given pen and question paper and Student 2 have paper.\n");
	    sleep(3); 				
	    shared=x; 
	    printf("Student 2 has completed assignment.\n\n");
	    pthread_mutex_unlock(&l);
	}
     
}
void *fun3(void *receive)
{
    int x;
    int q_paper=3;
    struct resource *check=(struct resource *)receive;
   	if((check->paper==1)&&(check->pen==1))
   	{
	    pthread_mutex_lock(&l);
	    x=shared;
	    x++;  
	    printf("Teacher has given pen and paper and student3 have question paper.\n");
	    sleep(3); 
	    shared=x; 
	    printf("Student 3 has completed assignment.\n\n");
	    pthread_mutex_unlock(&l);
	}	
}

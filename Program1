/*Write a program in C which reads input CPU bursts from a the first line of a text file named as CPU_BURST.txt. 
Validate the input numbers whether the numbers are positive integers or not. Consider the numbers as CPU burst.
If there are 5 positive integers in the first line of the text file then the program treat those argument as required CPU bust for
P1, P2, P3, P4, and P5 process and calculate average waiting time and average turnaround time. 
Consider used scheduling algorithm as SJF and same arrival time for all the processes. */


#include <stdio.h>
#include <stdlib.h>
int main()
 {
 	
 FILE *fp = fopen("CPU_BURST.txt", "r");       // open file in read mode  
	                       
 int bt[10],wt[10],tat[10],i=0,n,sum_tat=0,sum_wt=0,temp,p[10],j;
 float avg_wt,avg_tat;
 
 while((fscanf(fp,"%d",&bt[i]))==1)
 {
    if(bt[i]>0)
    { 
    p[i]=i+1;
    i++;
    }
}
    n=i;
    
//Sorting burst time
for(i=1;i<=n-1;i++)
  {
      for(j=0;j<n-i;j++)
      {
         if(bt[j]>bt[j+1])
         {
            temp=bt[j];
            bt[j]=bt[j+1];
            bt[j+1]=temp;
            }
            }
        }
        
      wt[0]=0;          // Waiting time for the process with lowest burst time will be 0
      // Calculating Waiting time
       for(i=1;i<n;i++)
       {
	            wt[i]=wt[i-1]+bt[i-1];
                sum_wt=sum_wt+wt[i];
        }
        avg_wt = ((float)sum_wt)/((float)n);    // Calculating average waiting time 
          
      // Calculatong Turn around time
       for(i=0;i<n;i++)
        {
            tat[i]=wt[i]+bt[i];
            sum_tat=sum_tat+tat[i];
         }
        avg_tat = ((float)sum_tat)/((float)n);  // Calculating average turn around time
        
           
        printf("Procees no.\tBurst Time(ms)\tWaiting Time(ms)\tTurn around Time(ms)\n");
        for(i=0;i<n;i++)
        {
            printf("\t%d\t\t%d\t\t%d\t\t%d\n",i+1,bt[i],wt[i],tat[i]);
		}
		
		printf("\nAverage waiting time: %f(ms)\n",avg_wt);
		printf("\nAverage turn around time: %f(ms)",avg_tat);
		
         fclose(fp);    // Closing file
          
		return 0;
}
